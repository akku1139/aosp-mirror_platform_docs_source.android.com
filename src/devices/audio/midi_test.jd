page.title=MIDI Test Procedure
@jd:body

<!--
    Copyright 2015 The Android Open Source Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->

<div id="qv-wrapper">
  <div id="qv">
    <h2>In this document</h2>
    <ol id="auto-toc">
    </ol>
  </div>
</div>

<p>These tests may be used to validate the MIDI feature on Android devices.</p>

<h1 id="preparation">Preparation</h1>


<h2 id="equipment_needed_for_some_tests">Equipment Needed for Some Tests</h2>


<ul>
  <li> MIDI keyboard with USB connector, eg. "<a href="http://www.akaipro.com/product/lpk25">Akai LPK25</a>"</li>
  <li> MIDI keyboard with BTLE support, eg. "<a href="http://miselu.com/">Miselu C.24</a>"</li>
  <li> OTG adaptor "On The Go" to convert a female USB-A to male micro-USB or USB-C</li>
  <li> Android phone or tablet running Marshmallow or later release</li>
</ul>

<h2 id="apps">Apps</h2>


<p>Several apps are used by this test suite and available <a href="TBD">here</a>. </p>

<ul>
  <li> <strong>MidiScope</strong> displays MIDI messages on-screen.</li>
  <li> <strong>MidiKeyboard</strong> sends MIDI messages by pressing an on-screen music keyboard.</li>
  <li> <strong>MidiSynthExample</strong> is a simple MIDI synthesizer that uses sawtooth oscillators.</li>
  <li> <strong>MidiBtlePairing</strong> pairs an Android device with a BLE-MIDI device.</li>
  <li> <strong>MidiEchoServer</strong> is like a ping server for MIDI.</li>
  <li> <strong>MidiMatrix</strong> is a collection of tests in one app.</li>
</ul>

<p>Each test has a list of apps that are used. You can install these apps using
ADB. To install, for example, the MidiScope:</p>

<ol>
  <li> Use a workstation with ADB installed.</li>
  <li> Connect a USB cable from the workstation to the Android device.</li>
  <li> You may need to "allow" the USB connection on the Android device.</li>
  <li> Enter:</li>
</ol>

<pre class="prettyprint">
cd {this-folder}
adb install -r MidiScope.apk
</pre>


<p>Source code for some of these apps is on GitHub:</p>

<p><a href="https://github.com/googlesamples/android-MidiScope">https://github.com/googlesamples/android-MidiScope</a></p>

<p><a href="https://github.com/googlesamples/android-MidiSynth">https://github.com/googlesamples/android-MidiSynth</a></p>

<h1 id="virtual_synth_tests">Virtual Synth Tests</h1>


<p>Note that a MIDI Input Port can only have one connection. So if another app is
already using an input port it will not be available. If you cannot connect to
an input port then try closing other apps.</p>

<p>Hardware needed:  just an Android device</p>

<h2 id="simple_connection">Simple Connection</h2>


<p>Apps needed: MidiKeyboard.apk, MidiSynthExample.apk</p>

<p>This tests device enumeration, virtual devices, port connections, and message
sending.</p>

<ol>
  <li> Adjust volume on phone or tablet to about half way.</li>
  <li> Orient phone in landscape mode.</li>
  <li> Launch "Midi Keyboard" app.</li>
  <li> Select "SynthExample" from the spinner menu.</li>
  <li> Play keys. You should hear notes being played in the SynthExample app.</li>
  <li> Exit the application by pressing the Back button so that the port will be
closed.</li>
</ol>

<h2 id="complex_connection">Complex Connection</h2>


<p>Apps needed: MidiMatrix.apk and MidiEchoServer.apk</p>

<p>This tests device enumeration, virtual devices, port connections, message
sending, and timestamping.</p>

<ol>
  <li> Adjust volume on phone or tablet to about half way.</li>
  <li> Launch "Midi Matrix" app.</li>
  <li> At top, next to "Receiver for Keys", select "MidiSynthBasic" from the spinner
menu.</li>
  <li> Press the C, D, E, F, G keys. You should hear notes being played.</li>
  <li> Press the "ORDERED" button. You should hear 5 notes ascending in pitch.</li>
  <li> Press the "UNORDERED" button. You should hear the same 5 notes ascending in
pitch.</li>
  <li> At top, next to "Receiver for Keys", select " - - - - -" from the spinner menu
to disconnect from the Synth.</li>
  <li> At top, next to "Receiver for Keys", select "MidiEcho".</li>
  <li> Press the C, D, E, F, G keys. You should hear nothing.</li>
  <li> At middle, next to "Sender for Synth", select  "MidiEcho".</li>
  <li> Press the C, D, E, F, G keys. You should hear notes being played. (Notes are
sent to the MidiEcho server and then echoed back to the Synth.)</li>
  <li> Exit the application by pressing the Back button so that the port will be
closed.</li>
</ol>

<h1 id="usb_test_-_host_mode">USB Test - Host Mode</h1>


<p>Hardware needed: USB-MIDI keyboard with cable, OTG adapter</p>

<p>Repeat these tests a few times. We have seen the USB stack crash hard on some
prototype devices if devices were plugged in and unplugged a few times.</p>

<h2 id="keyboard_already_plugged_in">Keyboard Already Plugged In</h2>


<p>Apps needed: MidiSynthExample.apk OR MidiScope.apk</p>

<p>This tests USB-MIDI in "host" mode.</p>

<ol>
  <li> Adjust volume on phone or tablet to about half way.</li>
  <li> Plug in USB keyboard using the OTG adapter.</li>
  <li> Launch "SynthExample" app or the "MidiScope" app.</li>
  <li> From the menu select  the USB keyboard. It will say "Akai" or whatever brand
you are using.</li>
  <li> Play notes on the keyboard. If you ran SynthExample then you should hear notes
being played on the phone. If you ran MidiScope then you should see NoteOn and
NoteOff messages on-screen.</li>
  <li> Unplug the keyboard. The Sender for Synth menu should display "- - - - -".</li>
  <li> Exit the application by pressing the Back button.</li>
</ol>

<h2 id="hot_plug_usb_keyboard">Hot Plug USB Keyboard</h2>


<p>Apps needed: MidiSynthExample.apk OR MidiScope.apk</p>

<p>This tests USB-MIDI in "host" mode.</p>

<ol>
  <li> Adjust volume on phone or tablet to about half way.</li>
  <li> Make sure there is not a USB-MIDI keyboard plugged in.</li>
  <li> Launch "SynthExample" app.</li>
  <li> At middle, next to "Sender for Synth", look in menu. You should not see the USB
keyboard listed.</li>
  <li> Plug in USB keyboard using the OTG adapter.</li>
  <li> At middle, next to "Sender for Synth", select  the USB keyboard. It will say
"Akai" or whatever brand you are using.</li>
  <li> Play notes on the keyboard. You should hear notes being played on the phone.</li>
  <li> At middle, next to "Sender for Synth", select "- - - - -".</li>
  <li> Play notes on the keyboard. You should hear nothing.</li>
  <li> At middle, next to "Sender for Synth", select  the USB keyboard. It will say
"Akai" or whatever brand you are using.</li>
  <li> Play notes on the keyboard. You should hear notes being played on the phone.</li>
  <li> Unplug the synthesizer. The Sender for Synth menu should display "- - - - -".</li>
  <li>  Exit the application by pressing the Back button.</li>
</ol>

<h1 id="usb-midi_test_-_peripheral_mode">USB-MIDI Test - Peripheral Mode</h1>


<p>Hardware needed: Android debug cable, OTG adapter</p>

<h2 id="android_to_android">Android to Android</h2>


<p>Apps needed: MidiKeyboard.apk on device being tested, MidiScope.apk on another
device.</p>

<p>Use Android devices as a peripheral controller for another device. To help test
this mode we will use another Android device running in Host mode. Note that
you could modify the test to work with a Macintosh running a music app like
Garageband.</p>

<ol>
  <li> Connect the USB debug cable to the device being tested (Android "<strong>A</strong>").</li>
  <li> Use an OTG adapter to connect the other end of the cable, to a second Android
device that works in host mode, (Android "<strong>B</strong>").</li>
  <li> <strong>On Android "A"</strong>
  <ol>
    <li> Drag finger down from top of screen.</li>
    <li> Click on the "USB for Charging" icon.</li>
    <li> Select "MIDI".</li>
    <li> Launch MidiKeyboard app.</li>
    <li> Select "Android USB Peripheral Port" from "Receiver for Keys" menu at top.</li>
  </ol>
  </li>
  <li> <strong>On Android "B"</strong>
  <ol>
    <li> Launch MidiScope app.</li>
    <li> Select the other Android device as the source, eg. "Android Nexus 7".</li>
  </ol>
  </li>
  <li> <strong>On Android "A"</strong>
  <ol>
    <li> Play notes on the keyboard and look for NoteOn and NoteOff on Android "B".</li>
  </ol>
  </li>
  </ol>

<h1 id="bluetooth_le_midi_test">Bluetooth LE MIDI Test</h1>


<p>Hardware needed: any BLE-MIDI keyboard, for example, the "Miselu C.24".</p>

<h2 id="basic_pairing_and_playing">Basic Pairing and Playing</h2>


<p>Apps needed: MidiBtlePairing.apk, MidiSynthExample.apk</p>

<p>Test a keyboard connected to Android over Bluetooth LE.</p>

<ol>
  <li> Reboot the Android device.</li>
  <li> Power on the MIDI/BTLE keyboard.</li>
  <li> (The Miselu C.24 keyboard is powered on by pushing the button near the back so
that it pops open. The power button on the C.24 pulses blue when in pairing
mode.)</li>
  <li> Launch the MidiBtlePairing app. It has a "MIDI+BTLE" icon.</li>
  <li> Click "Bluetooth Scan" button</li>
  <li> Select desired device, eg. C.24</li>
  <li> The App should return to the main page and you should see the device listed. If
you are using a C.24 then you will notice that the light should turn green on
the C.24 to indicate paired mode.</li>
  <li> Exit the MIDI+BTLE app by hitting the "Home" button, not the "Back" button.</li>
  <li> Launch the SynthExample app.</li>
  <li> Select the C.24 as the Sender from the menu.</li>
  <li> You should be able to hit keys on the Bluetooth keyboard and hear notes on
Android.</li>
</ol>
