page.title=Customizing Android for Work
@jd:body

<!--
    Copyright 2015 The Android Open Source Project

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
-->
<div id="qv-wrapper">
  <div id="qv">
    <h2>In this document</h2>
    <ol id="auto-toc">
    </ol>
  </div>
</div>

<h2 id=using_improved_devicepolicymanager_apis>Using improved DevicePolicyManager APIs</h2>

<p>Android 5.x offers a greatly improved DevicePolicyManager with dozens of new
APIs to support both corporate-owned and bring your own device (BYOD) Android
for Work use cases. Examples include app restrictions, silent installation of
certificates, and cross-profile sharing intent access control. A sample Device
Policy Client (DPC) app (BasicManagedProfile.apk) is also available on
developer.android.com:</p>

<p><a href="https://developer.android.com/samples/BasicManagedProfile/index.html">https://developer.android.com/samples/BasicManagedProfile/index.html</a></p>

<h2 id=supporting_camera_operations_in_managed_profiles>Supporting Camera Operations in Managed Profiles</h2>

<p>In Android 5.x, managed profiles now allow corporate apps and accounts that are distinct from personal information on the same device.  This is implemented using Android’s existing multi-user infrastructure with additional changes to support an integrated launcher and share intents and data between users.</p>
<p>For camera operations, in most cases a corporate instance of the camera app
  will not exist; instead the following intents will be forwarded to the camera
  app in the primary user:</p>

<ul>
  <li> <code>MediaStore.ACTION_IMAGE_CAPTURE</code>
  <li> <code>MediaStore.ACTION_IMAGE_CAPTURE_SECURE</code>
  <li> <code>MediaStore.ACTION_VIDEO_CAPTURE</code>
  <li> <code>MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA</code>
  <li> <code>MediaStore.INTENT_ACTION_STILL_IMAGE_CAMERA_SECURE</code>
  <li> <code>MediaStore.INTENT_ACTION_VIDEO_CAMERA</code>
</ul>

<p>A side effect of this is that it’s necessary to wrap any file:// uris in <code>MediaStore.EXTRA_OUTPUT</code> in a <code>FileProvider</code> since it is  possible to grant appropriate permissions to only content:// uris
to cross the user boundary.</p>

<p>For example, if you are using something like this in your code:</p>

<pre>
Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
takePictureIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION +
      Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
<strong>takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);
takePictureIntent.setClipData(
      ClipData.newUri(getContentResolver(), "test", uri));</strong>
startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
</pre>

<p>You’ll need to:</p>

<ol>
  <li> Also set <code>ClipData</code> as shown above in order to use content:// uri on pre-Android 5.0 devices.
  <li> Make sure the URI you specify in the <code>EXTRA_OUTPUT</code> is a <strong>content://</strong> uri not a <strong>file://</strong> uri.
</ol>

<p>The easiest way to do this is to wrap your local file in a <a href="https://developer.android.com/reference/android/support/v4/content/FileProvider.html">FileProvider</a>.</p>
<p><strong>Warning</strong>: If you don’t do this, it won’t be possible to attach photos to your application
  from within a managed profile.</p>

<p>The code below contains a simple application to take a photo and display it.
Install this application in the primary profile and the managed profile and
verify that it behaves the same way in both cases.</p>

<h3 id=camera_example>Camera example</h3>

<pre>
package com.example.camerasample;

import android.app.Activity;
import android.app.ActionBar;
import android.app.Fragment;
import android.content.ClipData;
import android.content.Intent;
import android.graphics.Bitmap;
import android.net.Uri;
import android.os.Bundle;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.os.Build;
import android.provider.MediaStore;
import android.provider.MediaStore.Images.Media;
import android.support.v4.content.FileProvider;


import java.io.File;
import java.io.IOException;

public class MainActivity extends Activity {

    private Button button;
    private ImageView image;
    private String mCurrentPhotoPath;

    &#64;Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_camera);

        button = (Button) findViewById(R.id.button);
        image = (ImageView) findViewById(R.id.image);

        button.setOnClickListener(new OnClickListener() {
            &#64;Override
            public void onClick(View arg0) {
                try {
                    dispatchTakePictureIntent();
                    } catch (IOException e) {
                    //
                }
            }
        });
    }

    static final int REQUEST_IMAGE_CAPTURE = 1;

    private void dispatchTakePictureIntent() throws IOException {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {

            Uri uri = FileProvider.getUriForFile(this, "com.example.scratchpad", getTempFile());
            Log.d("adam", "Asking for photo, sending uri: " + uri);
            takePictureIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION +
Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, uri);
            takePictureIntent.setClipData(ClipData.newUri(getContentResolver(), "test", uri));
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
        }
    }

    &#64;Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        Log.d("adam", "onActivityResult : " + data);

        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
            try {
                Uri uri = FileProvider.getUriForFile(this, "com.example.scratchpad", getTempFile());
                Bitmap captureBmp = Media.getBitmap(getContentResolver(), uri);
                image.setImageBitmap(captureBmp);
            } catch (IOException e) {

            }
        }
    }


    private File getTempFile(){
        final File path = new File(getFilesDir(), "images");
        if(!path.exists()){
            path.mkdir();
        }
        return new File(path, "image.tmp");
    }
}
</pre>
